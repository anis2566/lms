generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  externalId String
  name String @unique
  email String @db.Text
  imageUrl String?

  purchased Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id String @id @default(uuid())
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  userId String?
  user User? @relation(fields: [userId], references: [id])

  chapters Chapter[]
  purchases Purchase[]
  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Category {
  id String @id @default(uuid())
  name String @unique
  imageUrl String @db.Text
  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id       String   @id @default(uuid())
  name     String
  imageUrl String
  rating   Int
  comment  String
  replies  ReviewReply[]  // Establish a one-to-many relationship

  courseId  String
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReviewReply {
  id       String @id @default(uuid())
  name     String
  imageUrl String
  comment  String

  reviewId String
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id String @id @default(uuid())
  title String
  url String @db.Text

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}

model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  videoThumbnail String?
  videoLength Int?
  videoPlayer String?
  position Int?
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]
  attachments Attachment[]
  questions Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Question {
  id         String   @id @default(uuid())
  text       String
  userName    String
  imageUrl    String?

  chapterId  String
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  replies QuestionReply[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([chapterId])
}

model QuestionReply {
  id        String   @id @default(uuid())
  text      String
  userName  String
  imageUrl  String
  attachment  String?

  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([questionId])
}

model UserProgress {
  id String @id @default(uuid())
  userId String

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id String @id @default(uuid())
  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}